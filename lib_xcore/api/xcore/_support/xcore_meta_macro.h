// Copyright (c) 2019-2020, XMOS Ltd, All rights reserved
#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#define _XCORE_SHIM(FLM, ...) FLM(__VA_ARGS__)
#define _XCORE_UNIQUE_LABEL_I(BNAME, CNT) BNAME ## CNT
#define _XCORE_UNIQUE_LABEL(BNAME) _XCORE_SHIM(_XCORE_UNIQUE_LABEL_I, BNAME, __COUNTER__)
#define _XCORE_STRINGIFY_I(S) #S
#define _XCORE_STRINGIFY(S) _XCORE_STRINGIFY_I(S)

#define _XCORE_SEP__XCORE_SEP_COMMA ,
#define _XCORE_SEP__XCORE_SEP_SEMICOLON ;
#define _XCORE_SEP__XCORE_SEP_NONE

#define _XCORE_APPLY00(F, SEP)
#define _XCORE_APPLY01(F, SEP, A0, ...) F(A0)                  _XCORE_APPLY00(F, SEP, ## __VA_ARGS__)
#define _XCORE_APPLY02(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY01(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY03(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY02(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY04(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY03(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY05(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY04(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY06(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY05(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY07(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY06(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY08(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY07(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY09(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY08(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY10(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY09(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY11(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY10(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY12(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY11(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY13(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY12(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY14(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY13(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY15(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY14(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY16(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY15(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY17(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY16(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY18(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY17(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY19(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY18(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY20(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY19(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY21(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY20(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY22(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY21(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY23(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY22(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY24(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY23(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY25(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY24(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY26(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY25(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY27(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY26(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY28(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY27(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY29(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY28(F, SEP, __VA_ARGS__)
#define _XCORE_APPLY30(F, SEP, A0, ...) F(A0) _XCORE_SEP_##SEP _XCORE_APPLY29(F, SEP, __VA_ARGS__)

#define _XCORE_GET30(I00,  I01,  I02,  I03,  I04,  T05,  T06,  T07,  T08,  T09, \
                     I10,  I11,  I12,  I13,  I14,  T15,  T16,  T17,  T18,  T19, \
                     I20,  I21,  I22,  I23,  I24,  T25,  T26,  T27,  T28,  T29, \
                     N, ...) N

#define _XCORE_APPLICATOR(...) \
  _XCORE_GET30(__VA_ARGS__, _XCORE_APPLY30, \
    _XCORE_APPLY29, _XCORE_APPLY28, _XCORE_APPLY27, _XCORE_APPLY26, _XCORE_APPLY25, \
    _XCORE_APPLY24, _XCORE_APPLY23, _XCORE_APPLY22, _XCORE_APPLY21, _XCORE_APPLY20, \
    _XCORE_APPLY19, _XCORE_APPLY18, _XCORE_APPLY17, _XCORE_APPLY16, _XCORE_APPLY15, \
    _XCORE_APPLY14, _XCORE_APPLY13, _XCORE_APPLY12, _XCORE_APPLY11, _XCORE_APPLY10, \
    _XCORE_APPLY09, _XCORE_APPLY08, _XCORE_APPLY07, _XCORE_APPLY06, _XCORE_APPLY05, \
    _XCORE_APPLY04, _XCORE_APPLY03, _XCORE_APPLY02, _XCORE_APPLY01, _XCORE_APPLY00)

#define _XCORE_APPLY_II(F, SEP, ...) _XCORE_APPLICATOR(__VA_ARGS__)(F, SEP, ## __VA_ARGS__)
#define _XCORE_APPLY_I(...) _XCORE_APPLY_II(__VA_ARGS__)
#define _XCORE_APPLY(F, ...) _XCORE_APPLY_I(F, _XCORE_SEP_COMMA, ## __VA_ARGS__)
#define _XCORE_APPLY_NOSEP(F, ...) _XCORE_APPLY_I(F, _XCORE_SEP_NONE, ## __VA_ARGS__)
#define _XCORE_LABELADDR(LABEL) &&LABEL

#define _XCORE_DEPAREN(...) __VA_ARGS__
#define _XCORE_UNPACK(PACK) _XCORE_DEPAREN PACK
#define _XCORE_PSHIM_I(FLM, PACK, ...) _XCORE_SHIM(FLM, _XCORE_UNPACK(PACK), ## __VA_ARGS__)
#define _XCORE_PSHIM(...) _XCORE_PSHIM_I(__VA_ARGS__)
#define _XCORE_PSHIM_NV(FLM, PACK) _XCORE_SHIM(_XCORE_SHIM, FLM, _XCORE_UNPACK(PACK))

#define _XCORE_TAIL(H_, ...) __VA_ARGS__
#define _XCORE_HEAD(H, ...) H

#define _XCORE_I(...) __VA_ARGS__
#define _XCORE_PACK_JOIN(LHS, RHS) (_XCORE_DEPAREN LHS, _XCORE_DEPAREN RHS)



#define _XCORE_TAG00(T_)
#define _XCORE_TAG01(T, V, ...) (T,V)  _XCORE_TAG00(T, ## __VA_ARGS__)
#define _XCORE_TAG02(T, V, ...) (T,V), _XCORE_TAG01(T, __VA_ARGS__)
#define _XCORE_TAG03(T, V, ...) (T,V), _XCORE_TAG02(T, __VA_ARGS__)
#define _XCORE_TAG04(T, V, ...) (T,V), _XCORE_TAG03(T, __VA_ARGS__)
#define _XCORE_TAG05(T, V, ...) (T,V), _XCORE_TAG04(T, __VA_ARGS__)
#define _XCORE_TAG06(T, V, ...) (T,V), _XCORE_TAG05(T, __VA_ARGS__)
#define _XCORE_TAG07(T, V, ...) (T,V), _XCORE_TAG06(T, __VA_ARGS__)
#define _XCORE_TAG08(T, V, ...) (T,V), _XCORE_TAG07(T, __VA_ARGS__)
#define _XCORE_TAG09(T, V, ...) (T,V), _XCORE_TAG08(T, __VA_ARGS__)
#define _XCORE_TAG10(T, V, ...) (T,V), _XCORE_TAG09(T, __VA_ARGS__)
#define _XCORE_TAG11(T, V, ...) (T,V), _XCORE_TAG10(T, __VA_ARGS__)
#define _XCORE_TAG12(T, V, ...) (T,V), _XCORE_TAG11(T, __VA_ARGS__)
#define _XCORE_TAG13(T, V, ...) (T,V), _XCORE_TAG12(T, __VA_ARGS__)
#define _XCORE_TAG14(T, V, ...) (T,V), _XCORE_TAG13(T, __VA_ARGS__)
#define _XCORE_TAG15(T, V, ...) (T,V), _XCORE_TAG14(T, __VA_ARGS__)
#define _XCORE_TAG16(T, V, ...) (T,V), _XCORE_TAG15(T, __VA_ARGS__)
#define _XCORE_TAG17(T, V, ...) (T,V), _XCORE_TAG16(T, __VA_ARGS__)
#define _XCORE_TAG18(T, V, ...) (T,V), _XCORE_TAG17(T, __VA_ARGS__)
#define _XCORE_TAG19(T, V, ...) (T,V), _XCORE_TAG18(T, __VA_ARGS__)
#define _XCORE_TAG20(T, V, ...) (T,V), _XCORE_TAG19(T, __VA_ARGS__)
#define _XCORE_TAG21(T, V, ...) (T,V), _XCORE_TAG20(T, __VA_ARGS__)
#define _XCORE_TAG22(T, V, ...) (T,V), _XCORE_TAG21(T, __VA_ARGS__)
#define _XCORE_TAG23(T, V, ...) (T,V), _XCORE_TAG22(T, __VA_ARGS__)
#define _XCORE_TAG24(T, V, ...) (T,V), _XCORE_TAG23(T, __VA_ARGS__)
#define _XCORE_TAG25(T, V, ...) (T,V), _XCORE_TAG24(T, __VA_ARGS__)
#define _XCORE_TAG26(T, V, ...) (T,V), _XCORE_TAG25(T, __VA_ARGS__)
#define _XCORE_TAG27(T, V, ...) (T,V), _XCORE_TAG26(T, __VA_ARGS__)
#define _XCORE_TAG28(T, V, ...) (T,V), _XCORE_TAG27(T, __VA_ARGS__)
#define _XCORE_TAG29(T, V, ...) (T,V), _XCORE_TAG28(T, __VA_ARGS__)
#define _XCORE_TAG30(T, V, ...) (T,V), _XCORE_TAG29(T, __VA_ARGS__)

#define _XCORE_TAGGER(...) \
  _XCORE_GET30(__VA_ARGS__, _XCORE_TAG30, \
    _XCORE_TAG29, _XCORE_TAG28, _XCORE_TAG27, _XCORE_TAG26, _XCORE_TAG25, \
    _XCORE_TAG24, _XCORE_TAG23, _XCORE_TAG22, _XCORE_TAG21, _XCORE_TAG20, \
    _XCORE_TAG19, _XCORE_TAG18, _XCORE_TAG17, _XCORE_TAG16, _XCORE_TAG15, \
    _XCORE_TAG14, _XCORE_TAG13, _XCORE_TAG12, _XCORE_TAG11, _XCORE_TAG10, \
    _XCORE_TAG09, _XCORE_TAG08, _XCORE_TAG07, _XCORE_TAG06, _XCORE_TAG05, \
    _XCORE_TAG04, _XCORE_TAG03, _XCORE_TAG02, _XCORE_TAG01, _XCORE_TAG00)

#define _XCORE_TAG_I(T, ...)  _XCORE_TAGGER(__VA_ARGS__)(T, ## __VA_ARGS__)
#define _XCORE_TAG(...) _XCORE_TAG_I(__VA_ARGS__)

#define _XCORE_PACK(...) (__VA_ARGS__)

#define _XCORE_COUNT30(...) \
  _XCORE_GET30(__VA_ARGS__, 30, \
    29, 28, 27, 26, 25, 24, 23, 22, 21, 20, \
    19, 18, 17, 16, 15, 14, 13, 12, 11, 10, \
    9,  8,  7,  6,  5,  4,  3,  2,  1,  0)

#ifdef __cplusplus
}
#endif

